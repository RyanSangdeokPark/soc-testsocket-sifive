
global def sifiveSkeletonScalaModule =
  makeScalaModuleFromJSON here "sifiveSkeleton"
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleDeps (rocketchipScalaModule, Nil)
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

global def simUARTBlock =
  def module = sifiveSkeletonScalaModule
  def config = "sifive.skeleton.WithSimUART"
  makeScalaBlock module config

global def testFinisherBlock =
  def module = sifiveSkeletonScalaModule
  def config = "sifive.skeleton.WithTestFinisher"
  makeScalaBlock module config

global def makeSkeletonDUTPlan name blocks =
  def testharness = "sifive.skeleton.SkeletonTestHarness"
  def config = "sifive.skeleton.DefaultConfig"
  makeRocketChipDUTPlan name sifiveSkeletonScalaModule testharness config

global def makeTestSocketDUT name blocks =
  def baseDUT =
    makeSkeletonDUTPlan name Nil
    | addRocketChipDUTPlanScalaBlock simUARTBlock
    | addRocketChipDUTPlanScalaBlock testFinisherBlock
  foldl addRocketChipDUTPlanScalaBlock.flip baseDUT blocks

global def makeBlockTest name block program plusargs =
  def bootloader = testfilePlusargBootloader
  def dutFilter dut =
    match (find (block.getScalaBlockConfig ==~ _) dut.getDUTConfigs)
      Some _ = True
      None   = False
  makeDUTTest name dutFilter program bootloader plusargs

target findOMDevice deviceType objectModel =
  def types = JArray (
    JString deviceType,
    JString "OMDevice",
    JString "OMComponent",
    JString "OMCompoundType",
    Nil
  )

  def isBlock jValue = match jValue
    JObject fields = exists (_.getPairSecond ==/ types) fields
    _ = False

  objectModel
  /../ isBlock
  | getJArray
  | getOrElse Nil
  | (!empty _)

global def makeOMBlockTest name deviceType program plusargs =
  def bootloader = testfilePlusargBootloader
  def dutFilter dut = findOMDevice deviceType dut.getDUTObjectModel
  makeDUTTest name dutFilter program bootloader plusargs

global def testfilePlusargBootloader =
  def programLoader =
    def plusarg = "testfile"
    def memoryRegion = "sram"
    def score = (\_ \_ 1.0)
    def compiler = freedomMetalDUTProgramCompiler
    makePlusargProgramLoader plusarg memoryRegion score compiler

  def bootloader =
    def score = (\_ \_ 1.0)
    makeSingleStageBootLoader programLoader score

  bootloader

global def fpgaTestSocketScalaModule =
  def name = "fpgaTestSocket"
  def scalaVersion = rocketchipScalaModule.getScalaModuleScalaVersion
  def rootDir = simplify "{here}/design/craft/fpga-test-socket"
  makeScalaModule name rootDir scalaVersion
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleResourceDirs Nil
  | setScalaModuleDeps (
    u500ScalaModule,
    sifiveSkeletonScalaModule,
    rocketchipScalaModule,
    Nil
  )
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

global def makeVC707TestSocketDUT name frequency blocks =
  def configs =
    "sifive.testsocket.fpga.FPGATestSocketConfig",
    "sifive.testsocket.fpga.WithTestSocketFPGADevKitDesign",
    Nil
  def scalaModule = fpgaTestSocketScalaModule
  def testharness = "sifive.fpgashells.shell.xilinx.VC707Shell"
  def baseDUT =
    makeRocketChipDUTPlan name scalaModule testharness ""
    | setRocketChipDUTPlanConfigs configs
  foldl addRocketChipDUTPlanScalaBlock.flip baseDUT blocks
  | setRocketChipDUTPlanTestharness testharness
  | addFPGADevKitFrequencyConfig frequency

publish vivadoVsrcHooks =
  def makeSource file _ = source file, Nil
  makeBlackBoxHook "PowerOnResetFPGAOnly" "fpga-shells/xilinx/common/vsrc/PowerOnResetFPGAOnly.v".makeSource,
  makeBlackBoxHook "EICG_wrapper" "rocket-chip/src/main/resources/vsrc/EICG_wrapper.v".makeSource,
  Nil
